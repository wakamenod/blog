{"/blogs/hello-world/":{"data":{"":"+# Hello! World. + +こんにちは、世界。"},"title":"Hello World"},"/docs/emacs/20241020210719-tab_bar_mode/":{"data":{"":"","tab-bar-mode#tab-bar-mode":"tab-bar-mode ずっとバッファをtabに表示するものと思って使ってこなかった (それは多分 tab-line-mode)。 tab-bar-mode はウィンドウ構成を1タブで管理する。便利。\n使いそうなコマンド:\nC-x t 2: 新規タブ作成 C-x t 0: 現在タブ削除 C-x t o: タブ移動 C-x t RET: タブ選択 tab-bar-history-mode を有効にすると、タブ一覧の左に\u003c \u003eが表示されるようになる。 これをポチポチすると、そのタブのウィンドウ構成を遡ることができる。 tab-bar-historyのコマンドもあるけど滅多に使わなそうなので、当面マウス操作で良いか。\ntab-bar-mode を使うと org-agenda-window-setup で other-tab のオプションが使えるようになる\n(setq org-agenda-window-setup 'other-tab) org-agendaを開くと、自動で新規タブが作られ、そのタブでアジェンダが表示される。 アジェンダを閉じるとタブも閉じられる。 既存のウィンドウ構成を崩さずにフレームを目一杯使ってアジェンダを表示できて嬉しい\n参考 tab-bar-modeを探検する "},"title":"tab-bar-mode"},"/docs/emacs/20241021104652-smartparens/":{"data":{"":"","smartparens#smartparens":"smartparens s-c にhydraを用意した。\n(leaf *hydra-cursor :doc \"Move cursor effectively\" :bind (\"s-c\" . *hydra-cursor/body) :after smartparens :pretty-hydra ((:title \"➤ Smart Cursor\" :color blue :quit-key \"q\" :foreign-keys warn :separator \"╌\") (\"Sexp\" ((\"a\" sp-beginning-of-sexp \"Begin\" :exit nil) (\"e\" sp-end-of-sexp \"End\" :exit nil) (\"d\" sp-down-sexp \"Down\" :exit nil) (\"u\" sp-up-sexp \"Up\" :exit nil) (\"D\" sp-backward-down-sexp \"Down backward\" :exit nil) (\"U\" sp-backward-up-sexp \"Up backward\" :exit nil) (\"n\" sp-next-sexp \"Next\" :exit nil) (\"p\" sp-previous-sexp \"Previous\" :exit nil) (\"F\" sp-forward-sexp \"Forward\" :exit nil) (\"B\" sp-backward-sexp \"Backward\" :exit nil)) \"Symbol\" ((\"f\" sp-forward-symbol \"Forward\" :exit nil) (\"b\" sp-backward-symbol \"Backward\" :exit nil)) \"Wrap\" ((\"(\" wrap-with-parens \"() parens\" :exit nil) (\"[\" wrap-with-brackets \"[] brackets\" :exit nil) (\"{\" wrap-with-braces \"{} braces\" :exit nil) (\"'\" wrap-with-single-quotes \"'' single quotes\" :exit nil) (\"\\\"\" wrap-with-double-quotes \"\\\"\\\" double quotes\" :exit nil)) \"Unwrap\" ((\",\" sp-backward-unwrap-sexp \"Backward\" :exit nil) (\"k\" sp-kill-sexp \"Kill\" :exit nil) (\".\" sp-forward-unwrap-sexp \"Forward\" :exit nil)) \"Expand\" ((\"+\" sp-forward-slurp-sexp \"Expand\" :exit nil) (\"-\" sp-forward-barf-sexp \"Shrink\" :exit nil))))) 正直、カーソルの移動系はnativeとの違いが分からないのが多かった。 以下は見たことがない動きなので使えるかも。\nsp-next-sexp ( C-M-n にもバインド) sp-previous-sexp ( =C-M-p にもバインド) wrap-xxxはこちらの defcustom を使わせて頂いた。 C-SPC で選択した範囲を囲うのと併せて、使う機会は多そう。\n参考 Emacsの括弧機能を超絶強化するsmartparensとrainbow-delimiters "},"title":"smartparens"},"/docs/emacs/20241021144801-lsp_bridge/":{"data":{"":"","lsp-breidge-refのカスタマイズ#lsp-breidge-refのカスタマイズ":"lsp-breidge-refのカスタマイズ lsp-bridgeは C-c C-r で参照一覧をlsp-briedge-ref ウィンドウで表示するが、 一覧を閉じるタイミングで、これまで参照から開いてたたバッファも全て消えてしまう。\nこれは、 lsp-bridge-ref-kill-temp-buffer-p と lsp-bridge-ref-open-file-in-request-window の両方を nilにすることで解決する。 以下でlsp-bridge-refに関するcustomize変数をまとめる。\n設定名 初期値 説明 lsp-bridge-ref-delete-other-windows t refウィンドウを開くタイミングで、refを開始したウィンドウ以外のウィンドウを閉じるか lsp-bridge-ref-open-file-in-request-window nil refで参照先を移動する際に、refを開始したウィンドウをそのまま使用するか lsp-bridge-ref-kill-temp-buffer-p t refウィンドウから開いたバッファを保持せずに閉じるか lsp-bridge-ref-open-file-in-request-window をtにすると lsp-bridge-ref-kill-temp-buffer-p が無効になる気がする"},"title":"lsp-bridge"},"/docs/emacs/20241022120540-gpg_gnupg/":{"data":{"":"","秘匿情報をgpgファイルから取得する#秘匿情報をgpgファイルから取得する":"秘匿情報をgpgファイルから取得する init.el に直接書きたくない秘匿情報の扱いに困ることがたまにあって、 gpgファイルについて調べた。よく分かってないこともあるが、以下で自分に必要な最低限のことはできる。 (※対象環境はMacOS)\nインストール pgp と pinentry-mac をインストール\nbrew install gnupg brew install pinentry-mac pinentry-macはパスフレーズを入力するためのUIで、 PGPファイルをパスフレーズで暗号化するときに使用する。\nインストールしたら、 .bashrc で以下の環境変数を設定し、\nexport GPG_TTY=$(tty) さらに、pgp-agent.confでpinentry-programを指定する。\necho \"pinentry-program /opt/homebrew/bin/pinentry-mac\" \u003e\u003e ~/.gnupg/gpg-agent.conf gpgをインストールしただけだと、パスフレーズ入力のタイミングでエラーになるので注意\nError while encrypting with “/opt/homebrew/bin/gpg”:\ngpg: problem with the agent: Inappropriate ioctl for device gpg: error creating passphrase: Operation cancelled gpg: symmetric encryption of ‘[stdin]’ failed: Operation cancelled\nPGPファイルの作成 ~/.authinfo.gpg に以下の形式でgpgファイルを作成する。\nmachine gcal-client-id login your-client-id password 123456789-abcdefghijklmnopqrstuvwxyz.apps.googleusercontent.com machine gcal-client-secret login your-client-secret password ABCDEF-GhIjKlMnOpQrStUvWxYz machine はサービスや識別子を指定する。 elisp から :host で指定する login は本来ユーザー名らしいけど、今回は使わない password の後に実際の値（クライアントIDやクライアントシークレット）を記述する。 elisp elispからは auth-source パッケージの auth-source-pick-first-password を使って設定した password の値を取得できる\n(setq auth-sources '(\"~/.authinfo.gpg\")) (setq gcal-client-id (auth-source-pick-first-password :host \"gcal-client-id\")) (setq gcal-client-secret (auth-source-pick-first-password :host \"gcal-client-secret\")) あとで読みたい Keeping Secrets in Emacs with GnuPG and Auth Sources "},"title":"gpg (GnuPG)"},"/docs/emacs/lsp-dart/":{"data":{"":"久し振りにFlutterプロジェクトを開いたら、動かなくなってて困った。 前回からEmacsの設定を大幅な見直しがあったので、それが要因だと思うけど、結局根本的な原因はよく分からず..\n以前はlsp-dartを入れるだけで、大体動いたはずなのだが、シンタックスハイライトが効かなかったり、LSPが起動しなかったりなんやかんや嵌ってしまった…\n(leaf dart-mode :ensure t :init (require 'tree-sitter) (require 'treesit) (add-hook 'dart-mode-hook #'tree-sitter-hl-mode) :mode ((\"\\\\.dart\\\\'\" . dart-mode))) (leaf lsp-dart :ensure t :config (defun wal/find-dart-flutter-sdk-dir () \"Find the Dart Flutter SDK directory.\" (when-let* ((flutter-bin (executable-find \"flutter\")) (sdk-dir (string-trim (shell-command-to-string \"flutter sdk-path\")))) sdk-dir)) (setq lsp-dart-test-tree-on-run nil) (when (string= system-type \"gnu/linux\") (setq lsp-dart-flutter-sdk-dir (wal/find-dart-flutter-sdk-dir))) (when (string= system-type \"darwin\") (setq lsp-dart-flutter-sdk-dir \"~/flutter\")) (when (string= system-type \"windows-nt\") (setq lsp-dart-flutter-sdk-dir \"C:/Users/wtnbjn/scoop/apps/flutter/current\")) :custom (lsp-dart-test-tree-on-run . nil) :hook (dart-mode-hook . lsp)) dart-mode でtree-sitter-hl-modeをフックするようにした。\n:init (require 'tree-sitter) (require 'treesit) (add-hook 'dart-mode-hook #'tree-sitter-hl-mode) :mode ((\"\\\\.dart\\\\'\" . dart-mode))) こんなの前までやらなくてもハイライトされてたと思うんだけど、謎。\ndar-ts-mode を用意してくれてる方もいて、これをセットアップするとハイライトされるようになるが、 現時点でははこれを入れるとlsp-dartでlspが起動しなくなる。"},"title":"lsp-dart"},"/docs/tools/20241016105646-%E8%87%AA%E4%BD%9C%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88/":{"data":{"":"","commands#Commands":"","composte-glyph問題#Composte Glyph問題":"Reference https://github.com/delphinus/homebrew-sfmono-square/blob/master/src/build.py https://github.com/wakamenod/homebrew-sfmono-square/blob/master/sfmono-square.rb https://qiita.com/delphinus/items/f472eb04ff91daf44274 Commands 開発中に使うコマンド. brew経由なので,ビルドスクリプトを変更したらCommit\u0026Pushしないと反映されない\n# フォント生成 brew reinstall --build-from-source --formula --verbose --keep-tmp ./sfmono-square.rb # 作ったフォントのフォルダを開く open \"$(brew --prefix sfmono-square)/share/fonts\" Composte Glyph問題 串 (U+4E32), 丹(U+4E39) 了(U+4E86) など、特定の文字だけフォントが小さくなる問題が発生した。\n調べたところ、これらの文字は はんなり明朝 で、Composite Glyphとして作成されていることが 分かった。FontForgeを使った調べ方:\nFontForgeで対象の文字を選択 グリフ情報 を開く Alternate Unicode Encodings / Variations Selectors の項目に複数のグリフが表示される 詳しくは分からないが、Compsite Glyph対してグリフの個数分スケール調整が適用されることで、 Compositeでない通常の文字に比べて小くなってしまっている\n解決方法\nChatGPTからComposite Glyphを分解する方法を提案されたが、存在しないメソッドを 使った実装が出るなどして解決に至らなかった。おそらく一般的な対応方法は出回ってないのだろう。 そこで、対応方針を変え、グリフをループしてスタイルを充てる箇所で、同じグリフに対して複数回スケール させないことで対応した。","reference#Reference":""},"title":"自作フォント"},"/docs/tools/20241020093445-skk/":{"data":{"":"","mac--aquaskk#Mac (AquaSKK)":"Mac (AquaSKK) キーマップのカスタマイズ ユーザレベルの設定を ~/Library に配置\n$ cp /Library/Input\\ Methods/AquaSKK.app/Contents/Resources/keymap.conf ~/Library/Application\\ Support/AquaSKK 以下で ; をStickyKeyに\nStickyKey ;\nキーバインド C-q 半角カタカナ 全角！を打つには ~/Library/Application\\ Support/AquaSKK にsymbols.ruleを配置し AquaSKKの 環境設定 より追加したルールを選択する\n参考 AquaSKK の設定と使い方 "},"title":"SKK"}}